```{python}
import pandas as pd

name = "Bob, Susie, Jimbo"
prof = "teacher, doctor, lawyer"
age = "45, 63, 119"

name_split = name.split(", ")
prof_split = prof.split(", ")
age_split = age.split(", ")

print(name_split, prof_split, age_split)

recap_df = pd.DataFrame([prof_split, age_split], columns=name_split)
print(recap_df)
```

```{python}
import pandas as pd

line1 = "English German Spanish French"
line2 = "dog Hund perro chien"
line3 = "cat Katze gato chat"
line4 = "house Haus casa maison"

line1_split = line1.split()
line2_split = line2.split()
line3_split = line3.split()
line4_split = line4.split()

print(line1_split, line2_split, line3_split, line4_split)

line_df = pd.DataFrame([line2_split, line3_split, line4_split], columns =line1_split)
print(line_df)
```

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})
df["is_extinct"] = [True, True, True, False]
df

# Drop (returns a new DF unless inplace=True)
df_no_family = df.drop(columns=["family"])
df_no_family

# Drop (returns a new DF unless inplace=True) 
df_no_latin = df.drop([0])
df_no_latin

df_reset_no_latin = df_no_latin.reset_index()
x = df_reset_no_latin.drop(columns=["index"])
x

df = df.rename(columns={"speakers_millions": "speakers_M"})
df

df_ind_drop = df.reset_index(drop=True)
df_ind_drop

df_set = df.set_index("language")
df_set
```

```{python}
import pandas as pd

name = "Bob, Susie, Jimbo"
prof = "teacher, doctor, lawyer"
age = "45, 63, 119"

name_split = name.split(", ")
prof_split = prof.split(", ")
age_split = age.split(", ")

recap_df = pd.DataFrame([prof_split, age_split], columns=name_split)
print(recap_df)

# Drop (returns a new DF unless inplace=True) 
df_noprof = recap_df.drop([0])
df_noprof
print("----------------------")
recap_df = df_noprof.reset_index()
recap_df = recap_df.drop(columns = ["index"])
recap_df
print("----------------------")

recap_mod3 = recap_df.reset_index(drop=True)
recap_mod3
print("----------------------")

recap_mod = recap_df.set_index("Bob")
recap_mod
print("----------------------")

```

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_M": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

df.sort_values(by="location", ascending=True)

reflexes_verb = pd.Series(
    {"Latin": 8, "Greek": 10, "Sanskrit": 12, "Old English": 6}
)
reflexes_noun = pd.Series(
    {"Latin": 5, "Greek": 7, "Gothic": 4, "Old Church Slavonic": 3}
)

combined = pd.DataFrame({"verb": reflexes_verb, "noun": reflexes_noun})
combined
print("----------------------")

combined_filled = combined.fillna(0)
combined_filled
print("----------------------")

total = reflexes_verb.add(reflexes_noun, fill_value=0)
total.sort_values(ascending=False)
```

```{python}
import pandas as pd

sound_df = pd.DataFrame({
  "s": [35, 28, 40],
  "z": [20, 25, 18],
  "t": [50, 40, 53],
  "k": [42, 35, 48],
  "m": [18, 13, 17],
  "n": [22, 20, 19]
})
sound_df
print("----------------------")

cons = sound_df["s"].add(sound_df["z"]).add(sound_df["t"]).add(sound_df["k"]).add(sound_df["m"]).add(sound_df["n"])
print("Total consonants per chapter:\n", cons)
print("----------------------")

fric = sound_df["s"].add(sound_df["z"])
print("\nFricatives per chapter:\n", fric)

print("----------------------")
total_fric = sound_df[["s", "z"]].sum().sum()
print("\nTotal number of fricatives:", total_fric)
```
